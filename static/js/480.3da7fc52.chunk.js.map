{"version":3,"file":"static/js/480.3da7fc52.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://samurai-way/./src/components/Profile/ProfileStatus/ProfileStatusFC.module.css?a116","components/Profile/ProfileStatus/ProfileStatusFC.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/MyPosts.module.css","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/Post/PostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__O6oKT\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__UdQft\",\"profileUserData\":\"ProfileInfo_profileUserData__i9vAf\",\"profileUserDataInfo\":\"ProfileInfo_profileUserDataInfo__j7GWw\",\"profileUserDataContacts\":\"ProfileInfo_profileUserDataContacts__zpS0r\",\"profileInfoDescription\":\"ProfileInfo_profileInfoDescription__JW8Fs\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileStatus\":\"ProfileStatusFC_profileStatus__S5euY\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './ProfileStatusFC.module.css'\r\n\r\ntype Props = {\r\n    status: string\r\n    updateProfileStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusFC = (props: Props) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateProfileStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const onSubmitStatus = () => {\r\n        props.updateProfileStatus(status)\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileStatus}>\r\n            {!editMode && <div onDoubleClick={activateEditMode}>\r\n                <span>{props.status || 'Enter you status'}</span>\r\n            </div>}\r\n            {editMode && <div onBlur={() => deactivateEditMode()}>\r\n                <input value={status}\r\n                       onChange={onStatusChange}\r\n                    // ref={this.statusInputRef}\r\n                       autoFocus={true} type=\"text\" placeholder={'Enter your status'}/>\r\n                <button onClick={onSubmitStatus}>Send</button>\r\n            </div>}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfilePropsType} from \"../Profile\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport avatar from './../../../assets/img/pic6.jpg'\r\nimport {ProfileStatusFC} from \"../ProfileStatus/ProfileStatusFC\";\r\n\r\nconst ProfileInfo = (props: ProfilePropsType) => {\r\n\r\n    const userProfileInfo = props.profile ? <div className={s.profileUserData}>\r\n        <img alt={'profile'} src={props.profile.photos.large ? props.profile.photos.large : avatar}/>\r\n        <div className={s.profileUserDataInfo}>\r\n            <span>{props.profile.fullName || 'My full name'}</span>\r\n            <span>{props.profile.aboutMe || 'Who am I'}</span>\r\n        </div>\r\n\r\n        <div className={s.profileUserDataContacts}>\r\n            <span>{props.profile.contacts.facebook || 'facebook'}</span>\r\n            <span>{props.profile.contacts.instagram || 'instagram'}</span>\r\n            <span>{props.profile.contacts.github || 'github'}</span>\r\n            <span>{props.profile.contacts.vk || 'vk'}</span>\r\n            <span>{props.profile.contacts.youtube || 'youtube'}</span>\r\n            <span>{props.profile.contacts.mainLink || 'mainLink'}</span>\r\n        </div>\r\n    </div> : <></>\r\n\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                <img alt={'wallpaper'}\r\n                     src={\"https://www.casa-pacifica.com/wp-content/uploads/2017/06/cropped-colorful-smoke-artistic-abstract-web-header.jpg\"}/>\r\n            </div>\r\n            <div className={s.profileInfoDescription}>\r\n                {!props.profile && <Preloader/>}\r\n                <ProfileStatusFC updateProfileStatus={props.updateProfileStatus} status={props.status}/>\r\n                {userProfileInfo}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__G6Eza\",\"likes\":\"Post_likes__CX8nH\",\"likes_title\":\"Post_likes_title__SYjUy\"};","import React, {FC} from 'react';\r\nimport styles from \"./Post.module.css\"\r\nimport pic6 from '../../../../assets/img/pic6.jpg'\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likes?: number\r\n}\r\nconst Post: FC<PostPropsType> = ({message, likes}) => {\r\n    return (\r\n        <div className={styles.item}>\r\n            <div>\r\n                <img alt={\"user avatar\"} src={pic6}/>\r\n                <span>{message}</span>\r\n            </div>\r\n\r\n            <div className={styles.likes}><span className={styles.likes_title}>&#10084; </span>{likes}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, minLength, requiredField} from \"../../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\r\n\r\nexport type PostDataT = {\r\n    post: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\nconst PostForm = (props: InjectedFormProps<PostDataT>) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field validate={[requiredField, maxLength10, minLength]} name={'post'} component={Textarea} placeholder={'new post text'} type={'text'}/>\r\n                </div>\r\n                <div>\r\n                    <button>Add Post</button>\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const PostReduxForm = reduxForm<PostDataT>({\r\n    form: 'post'\r\n})(PostForm)","import React, {memo} from 'react';\r\nimport styles from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostPropsType} from \"./MyPostsContainer\";\r\nimport {PostDataT, PostReduxForm} from \"./Post/PostForm\";\r\n\r\nconst MyPosts = memo((props: MyPostPropsType) => {\r\n        let {posts, addNewPost} = props;\r\n\r\n        console.log('render')\r\n\r\n\r\n        const postsList = posts.map(p => <Post key={p.id} message={p.message} likes={p.likes}/>)\r\n\r\n        // const newPostElement = createRef<HTMLTextAreaElement>()\r\n        const addNewPostHandler = (data: PostDataT) => {\r\n            console.log(data)\r\n            addNewPost(data.post)\r\n        }\r\n\r\n\r\n        return (\r\n            <div>My posts\r\n                <PostReduxForm onSubmit={addNewPostHandler}/>\r\n                <div className={styles.posts}>\r\n                    {postsList}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n)\r\nexport default MyPosts;","import {addPostAC, ProfilePageType} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n// import MyPostsClass from \"./MyPostsClass\";\r\n\r\n\r\ntype MapStatePropsType = ProfilePageType\r\n\r\ntype MapDispatchPropsType = {\r\n    addNewPost: (post: string) => void\r\n}\r\n\r\nexport type MyPostPropsType = MapDispatchPropsType & MapStatePropsType\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        profile: null,\r\n        status: state.profilePage.status\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addNewPost: (post: string) => dispatch(addPostAC(post)),\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport styles from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profileReducer\";\r\n\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateProfileStatus: (status: string)=> void\r\n}\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div className={styles.content}>\r\n            <ProfileInfo status={props.status} profile={props.profile} updateProfileStatus={props.updateProfileStatus} />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React, {ComponentType} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfileStatusTC, ProfilePageType, setUserProfileTC, updateProfileStatusTC} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withRouter} from \"react-router\";\r\nimport {RouteComponentProps} from \"react-router-dom\";\r\nimport {withRedirect} from \"../../hoc/withRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nexport type ProfileContainerPropsType = MapStateType & MapDispatchType\r\ntype MapDispatchType = {\r\n    setUserProfileTC: (userId: string | number) => void\r\n    getProfileStatusTC: (userId: string | number) => void\r\n    updateProfileStatusTC: (status: string) => void\r\n}\r\ntype MapStateType = ProfilePageType & { userId: string | null }\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.userId ? this.props.userId : ''\r\n            // if(!userId) this.props.history.push('/users')\r\n        }\r\n        this.props.setUserProfileTC(userId)\r\n        this.props.getProfileStatusTC(userId)\r\n    }\r\n\r\n    render() {\r\n        // if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n        return (\r\n            <Profile status={this.props.status} profile={this.props.profile}\r\n                     updateProfileStatus={this.props.updateProfileStatusTC}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateType => ({\r\n    profile: state.profilePage.profile,\r\n    posts: state.profilePage.posts,\r\n    status: state.profilePage.status,\r\n    userId: state.auth.id\r\n})\r\n\r\n\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n// const WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\n\r\n// export default withRedirect(connect(mapStateToProps, {setUserProfileTC})(WithUrlDataContainerComponent));\r\n\r\nexport default compose<ComponentType>(withRedirect, connect(mapStateToProps, {\r\n    setUserProfileTC,\r\n    getProfileStatusTC,\r\n    updateProfileStatusTC\r\n}), withRouter)(ProfileContainer)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateWithRedirect = { isAuth: boolean }\r\nconst mapStateWithRedirect = (state: AppStateType): MapStateWithRedirect => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport const withRedirect = <T,>(Component: ComponentType<T>) => {\r\n    class RedirectComponent extends React.Component<MapStateWithRedirect> {\r\n        render() {\r\n            const {isAuth, ...restProps} = this.props\r\n            if (!isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\n    const ConnectedRedirectComponent = connect(mapStateWithRedirect)(RedirectComponent)\r\n\r\n\r\n    return ConnectedRedirectComponent\r\n};\r\n\r\n"],"names":["ProfileStatusFC","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onDoubleClick","onBlur","updateProfileStatus","value","onChange","e","currentTarget","autoFocus","type","placeholder","onClick","userProfileInfo","profile","alt","src","photos","large","avatar","fullName","aboutMe","contacts","facebook","instagram","github","vk","youtube","mainLink","Preloader","message","likes","styles","pic6","maxLength10","maxLengthCreator","PostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","validate","requiredField","minLength","name","component","Textarea","memo","posts","addNewPost","console","log","postsList","map","p","id","data","post","connect","state","profilePage","dispatch","addPostAC","MyPosts","ProfileContainer","userId","this","match","params","setUserProfileTC","getProfileStatusTC","updateProfileStatusTC","React","compose","withRedirect","auth","withRouter","mapStateWithRedirect","isAuth","Component","RedirectComponent","restProps","to"],"sourceRoot":""}