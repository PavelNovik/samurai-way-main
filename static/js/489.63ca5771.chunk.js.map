{"version":3,"file":"static/js/489.63ca5771.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://samurai-way/./src/components/Profile/ProfileStatus/ProfileStatusFC.module.css?a116","components/Profile/ProfileStatus/ProfileStatusFC.tsx","components/Profile/ProfileInfo/UserProfileInfo/ProfileContacts/ContactItem/ContactItem.tsx","components/Profile/ProfileInfo/UserProfileInfo/ProfileContacts/UserProfileInfoContacts.tsx","components/Profile/ProfileInfo/UserProfileInfo/Forms/ProfileFormInputs.tsx","components/Profile/ProfileInfo/UserProfileInfo/Forms/ProfileContactForm.tsx","components/Profile/ProfileInfo/UserProfileInfo/ProfileData/UserProfileInfoData.tsx","components/Profile/ProfileInfo/UserProfileInfo/Forms/ProfileDataForm.tsx","components/Profile/ProfileInfo/UserProfileInfo/UserProfileInfo.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/MyPosts.module.css","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/Post/PostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__O6oKT\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__UdQft\",\"profileUserData\":\"ProfileInfo_profileUserData__i9vAf\",\"infoDataContainer\":\"ProfileInfo_infoDataContainer__KBOzE\",\"profileUserDataInfo\":\"ProfileInfo_profileUserDataInfo__j7GWw\",\"profileUserDataContacts\":\"ProfileInfo_profileUserDataContacts__zpS0r\",\"profileInfoDescription\":\"ProfileInfo_profileInfoDescription__JW8Fs\",\"mainPhoto\":\"ProfileInfo_mainPhoto__+jBr5\",\"photoContainer\":\"ProfileInfo_photoContainer__09fL6\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileStatus\":\"ProfileStatusFC_profileStatus__S5euY\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './ProfileStatusFC.module.css'\r\n\r\ntype Props = {\r\n    status: string\r\n    updateProfileStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusFC = (props: Props) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateProfileStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const onSubmitStatus = () => {\r\n        props.updateProfileStatus(status)\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileStatus}>\r\n            {!editMode && <div onDoubleClick={activateEditMode}>\r\n                <span>{props.status || 'Enter you status'}</span>\r\n            </div>}\r\n            {editMode && <div onBlur={() => deactivateEditMode()}>\r\n                <input value={status}\r\n                       onChange={onStatusChange}\r\n                    // ref={this.statusInputRef}\r\n                       autoFocus={true} type=\"text\" placeholder={'Enter your status'}/>\r\n                <button onClick={onSubmitStatus}>Send</button>\r\n            </div>}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n","import React from 'react';\r\n\r\ntype ContactItemProps = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nexport const ContactItem = ({contactTitle,contactValue}:ContactItemProps)=> {\r\n    return <span>{contactTitle} : {contactValue}</span>\r\n}\r\n","import React from 'react';\r\nimport s from \"../../ProfileInfo.module.css\";\r\nimport {ContactItem} from \"./ContactItem/ContactItem\";\r\nimport {ProfileType} from \"../../../../../redux/profileReducer\";\r\n\r\ntype Props = {\r\n    profile: ProfileType\r\n}\r\nexport const UserProfileInfoContacts = (props: Props) => {\r\n    const profile = props.profile\r\n    return (\r\n        <div className={s.profileUserDataContacts}>\r\n            <span>Contacts:</span>\r\n            {Object.keys(profile.contacts).map((el) => {\r\n                return <ContactItem key={el} contactTitle={el}\r\n                                    contactValue={profile.contacts[el as keyof typeof profile.contacts] || 'any Value'}/>\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {Field} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../../../common/FormsControls/FormsControls\";\r\n\r\ntype Props = {\r\n    name: string\r\n    // value?: string\r\n    placeholder?: string\r\n    label?: string\r\n}\r\nexport const ProfileFormInput = ({name, placeholder}: Props) => {\r\n    return (\r\n        <>\r\n            <Field validate={[]} name={name} component={Input} placeholder={placeholder}\r\n                   type=\"text\"/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const ProfileFormTextarea = ({name, placeholder}: Props) => {\r\n    return (\r\n        <>\r\n            <Field validate={[]} name={name} component={Textarea} placeholder={placeholder}\r\n                   type=\"text\"/>\r\n        </>\r\n    );\r\n};\r\nexport const ProfileFormCheckbox = ({name, label}: Props) => {\r\n    return (\r\n        <>\r\n            <label style={{fontSize: '16px'}}> {label}\r\n                <Field validate={[]} name={name} component={Input}\r\n                       type=\"checkbox\"/>\r\n            </label>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileFormInput} from \"./ProfileFormInputs\";\r\nimport s from \"../../../../Login/LoginForm.module.css\";\r\n\r\nexport type ContactFormData = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\nconst ProfileContactForm = (props: InjectedFormProps<ContactFormData>) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            Contacts:\r\n            <ProfileFormInput name={'facebook'} placeholder={'facebook'}/>\r\n            <ProfileFormInput name={'website'} placeholder={'website'}/>\r\n            <ProfileFormInput name={'vk'} placeholder={'vk'}/>\r\n            <ProfileFormInput name={'twitter'} placeholder={'twitter'}/>\r\n            <ProfileFormInput name={'instagram'} placeholder={'instagram'}/>\r\n            <ProfileFormInput name={'youtube'} placeholder={'youtube'}/>\r\n            <ProfileFormInput name={'github'} placeholder={'github '}/>\r\n            <ProfileFormInput name={'mainLink'} placeholder={'mainLink  '}/>\r\n\r\n            {props.error && <div className={s.formSumError}>{props.error}</div>}\r\n            <div>\r\n                <button>Save</button>\r\n            </div>\r\n\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const ProfileContactReduxForm = reduxForm<ContactFormData>({\r\n    // a unique name for the form\r\n    form: 'contacts'\r\n})(ProfileContactForm)\r\n","import React from 'react';\r\nimport {ProfileType} from \"../../../../../redux/profileReducer\";\r\n\r\ntype Props = {\r\n    profile: ProfileType\r\n}\r\nexport const UserProfileInfoData = ({profile}: Props) => {\r\n    return (\r\n        <>\r\n            <span>{profile.fullName || 'My full name'}</span>\r\n            <span>{profile.aboutMe || 'Who am I'}</span>\r\n            <span>Looking for a job: {profile.lookingForAJob ? 'Yes' : 'No'}</span>\r\n            <span>My skills: {profile.lookingForAJobDescription}</span>\r\n        </>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileFormCheckbox, ProfileFormInput, ProfileFormTextarea} from \"./ProfileFormInputs\";\r\nimport s from \"../../../../Login/LoginForm.module.css\";\r\n\r\nexport type ProfileFormData = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n}\r\nconst ProfileDataForm = (props: InjectedFormProps<ProfileFormData>) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            Main Data:\r\n            <ProfileFormInput name={'fullName'} placeholder={'full name'}/>\r\n            <ProfileFormInput name={'aboutMe'} placeholder={'about Me'}/>\r\n            <ProfileFormCheckbox name={'lookingForAJob'} label={'Looking for a Job?'}/>\r\n            <ProfileFormTextarea name={'lookingForAJobDescription'} placeholder={'Enter your skills'}/>\r\n            {props.error && <div className={s.formSumError}>{props.error}</div>}\r\n            <div>\r\n                <button>Save</button>\r\n            </div>\r\n\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const ProfileDataReduxForm = reduxForm<ProfileFormData>({\r\n    // a unique name for the form\r\n    form: 'profile'\r\n})(ProfileDataForm)\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from \"../ProfileInfo.module.css\";\r\nimport avatar from \"../../../../assets/img/pic1.svg\";\r\nimport {ProfilePropsType} from \"../../Profile\";\r\nimport {UserProfileInfoContacts} from \"./ProfileContacts/UserProfileInfoContacts\";\r\nimport {ContactFormData, ProfileContactReduxForm} from \"./Forms/ProfileContactForm\";\r\nimport {UserProfileInfoData} from \"./ProfileData/UserProfileInfoData\";\r\nimport {ProfileDataReduxForm, ProfileFormData} from \"./Forms/ProfileDataForm\";\r\nimport {ProfileContactsType} from \"../../../../redux/profileReducer\";\r\n\r\nexport const UserProfileInfo = ({profile, isOwner, ...props}: ProfilePropsType) => {\r\n\r\n    const [editContactMode, setEditContactMode] = useState(false)\r\n\r\n    const [editDataMode, setEditDataMode] = useState(false)\r\n    const initialProfile: ProfileFormData = {\r\n        fullName: profile?.fullName || '',\r\n        aboutMe: profile?.aboutMe || '',\r\n        lookingForAJob: profile?.lookingForAJob || false,\r\n        lookingForAJobDescription: profile?.lookingForAJobDescription || ''\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            console.log(typeof e.target.files[0])\r\n            props.updateProfilePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmitDataHandler = (data: ProfileFormData) => {\r\n\r\n        const updatedProfile = {\r\n            userId: profile?.userId || '',\r\n            contacts: profile?.contacts || {} as ProfileContactsType,\r\n            ...data\r\n        }\r\n        props.updateProfile(updatedProfile, 'profile').then(()=>{\r\n        setEditDataMode(!editDataMode)\r\n        })\r\n    }\r\n    const onSubmitContactHandler = (data: ContactFormData) => {\r\n        console.log(data)\r\n        const updatedProfile = {\r\n            userId: profile?.userId || '',\r\n            fullName: profile?.fullName || '',\r\n            aboutMe: profile?.aboutMe || '',\r\n            lookingForAJob: profile?.lookingForAJob || false,\r\n            lookingForAJobDescription: profile?.lookingForAJobDescription || '',\r\n            contacts: {\r\n                ...data\r\n            } || {} as ProfileContactsType,\r\n        }\r\n        console.log(updatedProfile)\r\n        props.updateProfile(updatedProfile, 'contacts').then(()=> {\r\n        setEditContactMode(!editContactMode)\r\n        })\r\n    }\r\n\r\n    return (\r\n        profile ? <div className={s.profileUserData}>\r\n            <div className={s.photoContainer}>\r\n                <img className={s.mainPhoto} alt={'profile'}\r\n                     src={profile.photos.large ? profile.photos.large : avatar}/>\r\n\r\n                {isOwner && <input onChange={onMainPhotoSelected} type={\"file\"}/>}\r\n            </div>\r\n\r\n            <div className={s.profileUserDataInfo}>\r\n                {!editDataMode && <UserProfileInfoData profile={profile}/>}\r\n                {editDataMode && <ProfileDataReduxForm onSubmit={onSubmitDataHandler} initialValues={initialProfile}/>}\r\n            </div>\r\n            <div className={s.infoDataContainer}>\r\n                {!editContactMode && <UserProfileInfoContacts profile={profile}/>}\r\n                {editContactMode &&\r\n                    <ProfileContactReduxForm initialValues={profile.contacts} onSubmit={onSubmitContactHandler}/>}\r\n            </div>\r\n            <div>\r\n                {!editDataMode && !editContactMode && isOwner && <button onClick={() => {\r\n                    setEditContactMode(!editContactMode)\r\n                    setEditDataMode(!editDataMode)\r\n                }}>Edit</button>}\r\n            </div>\r\n        </div> : <></>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfilePropsType} from \"../Profile\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatusFC} from \"../ProfileStatus/ProfileStatusFC\";\r\nimport {UserProfileInfo} from \"./UserProfileInfo/UserProfileInfo\";\r\n\r\nconst ProfileInfo = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                <img alt={'wallpaper'}\r\n                     src={\"https://www.casa-pacifica.com/wp-content/uploads/2017/06/cropped-colorful-smoke-artistic-abstract-web-header.jpg\"}/>\r\n            </div>\r\n            <div className={s.profileInfoDescription}>\r\n                {!props.profile && <Preloader/>}\r\n                <ProfileStatusFC updateProfileStatus={props.updateProfileStatus} status={props.status}/>\r\n\r\n                <UserProfileInfo {...props}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo;\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__G6Eza\",\"likes\":\"Post_likes__CX8nH\",\"likes_title\":\"Post_likes_title__SYjUy\"};","import React, {FC} from 'react';\r\nimport styles from \"./Post.module.css\"\r\nimport pic6 from '../../../../assets/img/pic6.jpg'\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likes?: number\r\n}\r\nconst Post: FC<PostPropsType> = ({message, likes}) => {\r\n    return (\r\n        <div className={styles.item}>\r\n            <div>\r\n                <img alt={\"user avatar\"} src={pic6}/>\r\n                <span>{message}</span>\r\n            </div>\r\n\r\n            <div className={styles.likes}><span className={styles.likes_title}>&#10084; </span>{likes}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, minLength, requiredField} from \"../../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\r\n\r\nexport type PostDataT = {\r\n    post: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\nconst PostForm = (props: InjectedFormProps<PostDataT>) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field validate={[requiredField, maxLength10, minLength]} name={'post'} component={Textarea} placeholder={'new post text'} type={'text'}/>\r\n                </div>\r\n                <div>\r\n                    <button>Add Post</button>\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const PostReduxForm = reduxForm<PostDataT>({\r\n    form: 'post'\r\n})(PostForm)","import React, {memo} from 'react';\r\nimport styles from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostPropsType} from \"./MyPostsContainer\";\r\nimport {PostDataT, PostReduxForm} from \"./Post/PostForm\";\r\n\r\nconst MyPosts = memo((props: MyPostPropsType) => {\r\n        let {posts, addNewPost} = props;\r\n\r\n\r\n\r\n        const postsList = posts.map(p => <Post key={p.id} message={p.message} likes={p.likes}/>)\r\n\r\n        // const newPostElement = createRef<HTMLTextAreaElement>()\r\n        const addNewPostHandler = (data: PostDataT) => {\r\n            addNewPost(data.post)\r\n        }\r\n\r\n\r\n        return (\r\n            <div>My posts\r\n                <PostReduxForm onSubmit={addNewPostHandler}/>\r\n                <div className={styles.posts}>\r\n                    {postsList}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n)\r\nexport default MyPosts;","import {addPostAC, ProfilePageType} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n// import MyPostsClass from \"./MyPostsClass\";\r\n\r\n\r\ntype MapStatePropsType = ProfilePageType\r\n\r\ntype MapDispatchPropsType = {\r\n    addNewPost: (post: string) => void\r\n}\r\n\r\nexport type MyPostPropsType = MapDispatchPropsType & MapStatePropsType\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        profile: null,\r\n        status: state.profilePage.status\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addNewPost: (post: string) => dispatch(addPostAC(post)),\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport styles from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileRequest, ProfileType} from \"../../redux/profileReducer\";\r\n\r\n\r\nexport type ProfilePropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateProfileStatus: (status: string) => void\r\n    updateProfilePhoto: (file: File) => void\r\n    updateProfile: (profile: ProfileRequest, form: string) => Promise<void>\r\n}\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div className={styles.content}>\r\n            <ProfileInfo {...props}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React, {ComponentType} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getProfileStatusTC,\r\n    ProfilePageType, ProfileRequest,\r\n    setUserProfileTC,\r\n    updateProfilePhotoTC,\r\n    updateProfileStatusTC, updateProfileTC\r\n} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withRouter} from \"react-router\";\r\nimport {RouteComponentProps} from \"react-router-dom\";\r\nimport {withRedirect} from \"../../hoc/withRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nexport type ProfileContainerPropsType = MapStateType & MapDispatchType\r\ntype MapDispatchType = {\r\n    setUserProfileTC: (userId: string | number) => void\r\n    getProfileStatusTC: (userId: string | number) => void\r\n    updateProfileStatusTC: (status: string) => void\r\n    updateProfilePhotoTC: (file: File)=> void\r\n    updateProfileTC: (profile: ProfileRequest, form: string) => Promise<void>\r\n}\r\ntype MapStateType = ProfilePageType & { userId: string | null }\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.userId ? this.props.userId : ''\r\n            // if(!userId) this.props.history.push('/users')\r\n        }\r\n        this.props.setUserProfileTC(userId)\r\n        this.props.getProfileStatusTC(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<CommonPropsType>, prevState: Readonly<{}>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n        return (\r\n            <Profile isOwner={!this.props.match.params.userId} status={this.props.status} profile={this.props.profile}\r\n                     updateProfileStatus={this.props.updateProfileStatusTC}\r\n                     updateProfilePhoto={this.props.updateProfilePhotoTC}\r\n                     updateProfile={this.props.updateProfileTC}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateType => ({\r\n    profile: state.profilePage.profile,\r\n    posts: state.profilePage.posts,\r\n    status: state.profilePage.status,\r\n    userId: state.auth.id\r\n})\r\n\r\n\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n// const WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\n\r\n// export default withRedirect(connect(mapStateToProps, {setUserProfileTC})(WithUrlDataContainerComponent));\r\n\r\nexport default compose<ComponentType>(withRedirect, connect(mapStateToProps, {\r\n    setUserProfileTC,\r\n    getProfileStatusTC,\r\n    updateProfileStatusTC,\r\n    updateProfilePhotoTC, updateProfileTC\r\n}), withRouter)(ProfileContainer)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateWithRedirect = { isAuth: boolean }\r\nconst mapStateWithRedirect = (state: AppStateType): MapStateWithRedirect => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport const withRedirect = <T,>(Component: ComponentType<T>) => {\r\n    class RedirectComponent extends React.Component<MapStateWithRedirect> {\r\n        render() {\r\n            const {isAuth, ...restProps} = this.props\r\n            if (!isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\n    const ConnectedRedirectComponent = connect(mapStateWithRedirect)(RedirectComponent)\r\n\r\n\r\n    return ConnectedRedirectComponent\r\n};\r\n\r\n"],"names":["ProfileStatusFC","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onDoubleClick","onBlur","updateProfileStatus","value","onChange","e","currentTarget","autoFocus","type","placeholder","onClick","ContactItem","contactTitle","contactValue","UserProfileInfoContacts","profile","Object","keys","contacts","map","el","ProfileFormInput","name","Field","validate","component","Input","ProfileFormTextarea","Textarea","ProfileFormCheckbox","label","style","fontSize","ProfileContactReduxForm","reduxForm","form","onSubmit","handleSubmit","error","UserProfileInfoData","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","ProfileDataReduxForm","UserProfileInfo","isOwner","editContactMode","setEditContactMode","editDataMode","setEditDataMode","initialProfile","alt","src","photos","large","avatar","target","files","console","log","updateProfilePhoto","data","updatedProfile","userId","updateProfile","then","initialValues","Preloader","message","likes","styles","pic6","maxLength10","maxLengthCreator","PostReduxForm","requiredField","minLength","memo","posts","addNewPost","postsList","p","id","post","connect","state","profilePage","dispatch","addPostAC","MyPosts","ProfileContainer","this","match","params","setUserProfileTC","getProfileStatusTC","refreshProfile","prevProps","prevState","updateProfileStatusTC","updateProfilePhotoTC","updateProfileTC","React","compose","withRedirect","auth","withRouter","mapStateWithRedirect","isAuth","Component","RedirectComponent","restProps","to"],"sourceRoot":""}