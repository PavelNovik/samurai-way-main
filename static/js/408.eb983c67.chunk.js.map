{"version":3,"file":"static/js/408.eb983c67.chunk.js","mappings":"yKACA,EAA0B,yBAA1B,EAA6D,yB,mBCuB7D,GAFuBA,EAAAA,EAAAA,KATC,SAACC,GACrB,MAAO,CACHC,MAAOD,EAAME,aAAaD,UAGP,SAACE,GACxB,MAAO,KAGYJ,CAA6CK,EAAAA,G,UCrBpE,EAA0B,yBAA1B,EAA4D,wB,SCmB5D,EAZsC,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,OACrD,OACI,iBAAKC,UAAWD,EAASE,EAAYA,EAAY,IAAMA,EAAvD,WACI,gBAAKC,IAAK,SACLC,IAAKL,KACV,0BACI,0BAAOD,UCbvB,EAA2B,2B,uCCQrBO,GAAcC,EAAAA,EAAAA,IAAiB,IAmBxBC,GAAmBC,EAAAA,EAAAA,GAAwB,CACpDC,KAAM,WADsBD,EAjBZ,SAACE,GACjB,OACI,0BACI,kBAAMC,SAAUD,EAAME,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,SAAU,CAACC,EAAAA,GAAeC,EAAAA,GAAWX,GAAcY,KAAM,UAAWC,UAAWC,EAAAA,GAC/EC,YAAa,mBAAoBC,KAAM,YAElD,0BACI,+CCOpB,EApBwC,SAACX,IACzBY,EAAAA,EAAAA,QAA4B,MAAxC,IAOMC,EAAeb,EAAMc,SAASC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAoB5B,QAAS4B,EAAE5B,QAASC,OAAQ2B,EAAEtB,IACzCJ,OAAQ0B,EAAE1B,QADL0B,EAAEC,OAI7D,OACI,iBAAK1B,UAAWC,EAAhB,UACKqB,GACD,SAAChB,EAAD,CAAkBI,SAZJ,SAACiB,GACnBC,QAAQC,IAAIF,GACZlB,EAAMqB,cAAcH,EAAK9B,gB,oBCuBjC,GAAekC,EAAAA,EAAAA,KAAuBxC,EAAAA,EAAAA,KAlBd,SAACC,GACrB,MAAO,CACH+B,SAAU/B,EAAME,aAAa6B,aAGV,SAAC5B,GACxB,MAAO,CACHmC,cAAe,SAACjC,GAAD,OAAqBF,GAASqC,EAAAA,EAAAA,GAAanC,SAY9DoC,EAAAA,EADJ,CACkBC,GChBlB,EAdgB,WAEZ,OACI,iBAAKlC,UAAWC,EAAhB,WACI,qCACA,iBAAKD,UAAWC,EAAhB,WACI,SAAC,EAAD,KACA,SAACkC,EAAD,Y,uKCPVC,EAAuB,SAAC5C,GAAD,MAAgD,CACzE6C,OAAQ7C,EAAM8C,KAAKD,SAEVJ,EAAe,SAAKM,GAAiC,IACxDC,EADuD,0IAEzD,WACI,MAA+BC,KAAKhC,MAA7B4B,EAAP,EAAOA,OAAWK,GAAlB,YACA,OAAKL,GACE,SAACE,GAAD,UAAeG,KADF,SAAC,KAAD,CAAUC,GAAI,eAJmB,GAC7BC,EAAAA,WAWhC,OAHmCrD,EAAAA,EAAAA,IAAQ6C,EAAR7C,CAA8BiD","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Users/UsersContainer.tsx","webpack://samurai-way/./src/components/Dialogs/Messages/Message/Message.module.css?fb09","components/Dialogs/Messages/Message/Message.tsx","webpack://samurai-way/./src/components/Dialogs/Messages/Messages.module.css?2673","components/Dialogs/Messages/MessageForm.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Messages/MessagesContainer.tsx","components/Dialogs/Dialogs.tsx","hoc/withRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__fG63h\",\"wrapper\":\"Dialogs_wrapper__22gZM\"};","import Users from \"./Users\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {UsersType} from \"../../../redux/messagesReducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    users: UsersType[]\r\n}\r\ntype MapDispatchPropsType = {\r\n\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: state.messagesPage.users,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {}\r\n}\r\n\r\nconst UsersContainer = connect(mapStateToProps, mapDispatchToProps)(Users)\r\n\r\nexport default UsersContainer","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__+5HE8\",\"friend\":\"Message_friend__jgggd\"};","import React, {FC} from 'react';\r\nimport s from \"./Message.module.css\"\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n    avatar: string\r\n    isUser: boolean\r\n}\r\nconst Message: FC<MessagePropsType> = ({message, avatar, isUser}) => {\r\n    return (\r\n        <div className={isUser ? s.message : s.message + ' ' + s.friend}>\r\n            <img alt={'avatar'}\r\n                 src={avatar}/>\r\n            <div>\r\n                <span>{message}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Message;","// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"Messages_messages__8Rxwd\"};","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, minLength, requiredField} from \"../../../utils/validators/validators\";\r\n\r\nexport type MessageDataT = {\r\n    message: string\r\n}\r\n\r\nconst maxLength20 = maxLengthCreator(20)\r\n\r\nconst MessageForm = (props: InjectedFormProps<MessageDataT>) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field validate={[requiredField, minLength, maxLength20]} name={'message'} component={Textarea}\r\n                           placeholder={'new message text'} type={'text'}/>\r\n                </div>\r\n                <div>\r\n                    <button>Send</button>\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const MessageReduxForm = reduxForm<MessageDataT>({\r\n    form: 'message'\r\n})(MessageForm);","import React, {FC, useRef} from 'react';\r\nimport Message from \"./Message/Message\";\r\nimport s from \"./Messages.module.css\"\r\nimport {MessagesPropsType} from \"./MessagesContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {MessageDataT, MessageReduxForm} from \"./MessageForm\";\r\n\r\nconst Messages: FC<MessagesPropsType> = (props) => {\r\n    const ref = useRef<HTMLTextAreaElement>(null)\r\n\r\n    const addNewMessage = (data: MessageDataT) => {\r\n        console.log(data)\r\n        props.addNewMessage(data.message)\r\n    }\r\n\r\n    const messagesList = props.messages.map(m => <Message key={m.id} message={m.message} avatar={m.src}\r\n                                                          isUser={m.isUser}/>)\r\n\r\n    // if(!props.isAuth) return <Redirect to={'/login'}/>\r\n    return (\r\n        <div className={s.messages}>\r\n            {messagesList}\r\n            <MessageReduxForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Messages;","import {addMessageAC, MessagesType} from \"../../../redux/messagesReducer\";\r\nimport Messages from \"./Messages\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withRedirect} from \"../../../hoc/withRedirect\";\r\nimport {ComponentType} from \"react\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    messages: MessagesType[]\r\n}\r\ntype MapDispatchPropsType = {\r\n    addNewMessage: (message: string) => void\r\n}\r\n\r\nexport type MessagesPropsType = MapStatePropsType & MapDispatchPropsType\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        messages: state.messagesPage.messages,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addNewMessage: (message: string) => dispatch(addMessageAC(message))\r\n    }\r\n}\r\n\r\n\r\n// const MessagesRedirectComponent = withRedirect(Messages)\r\n//\r\n// const MessagesContainer = connect(mapStateToProps, mapDispatchToProps)(MessagesRedirectComponent)\r\n\r\n// export default MessagesContainer;\r\n\r\nexport default compose<ComponentType>(connect(mapStateToProps, mapDispatchToProps),\r\n    withRedirect)(Messages)","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport UsersContainer from \"./Users/UsersContainer\";\r\nimport MessagesContainer from \"./Messages/MessagesContainer\";\r\n\r\n\r\nconst Dialogs = () => {\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <h2>Dialogs</h2>\r\n            <div className={s.wrapper}>\r\n                <UsersContainer/>\r\n                <MessagesContainer/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateWithRedirect = { isAuth: boolean }\r\nconst mapStateWithRedirect = (state: AppStateType): MapStateWithRedirect => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport const withRedirect = <T,>(Component: ComponentType<T>) => {\r\n    class RedirectComponent extends React.Component<MapStateWithRedirect> {\r\n        render() {\r\n            const {isAuth, ...restProps} = this.props\r\n            if (!isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\n    const ConnectedRedirectComponent = connect(mapStateWithRedirect)(RedirectComponent)\r\n\r\n\r\n    return ConnectedRedirectComponent\r\n};\r\n\r\n"],"names":["connect","state","users","messagesPage","dispatch","Users","message","avatar","isUser","className","s","alt","src","maxLength20","maxLengthCreator","MessageReduxForm","reduxForm","form","props","onSubmit","handleSubmit","Field","validate","requiredField","minLength","name","component","Textarea","placeholder","type","useRef","messagesList","messages","map","m","id","data","console","log","addNewMessage","compose","addMessageAC","withRedirect","Messages","MessagesContainer","mapStateWithRedirect","isAuth","auth","Component","RedirectComponent","this","restProps","to","React"],"sourceRoot":""}